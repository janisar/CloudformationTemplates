Description: Creates codepipeline, s3 bucket and a cloudfront for static web

Parameters:
  RepositoryName:
    Type: String
    Description: "Code repository for the codepipeline"
  ProjectName:
    Type: String
    Description: "Name of the project (for tagging purposes)"
  Environment:
    Type: String
    Description: "Environment of the application (for tagging purposes)"
  CodePipelineName:
    Type: String
    Description: "Name for the code pipeline to be created in the stack"
  CodeBuildName:
    Type: String
    Description: "Name for the code build to be created in the stack"
Resources:
  PipelineS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Environment"
          Value: !Ref Environment
  ReferrerAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: "PublicRead"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Environment"
          Value: !Ref Environment
    DeletionPolicy: "Retain"
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ReferrerAppS3Bucket
                - /*
      Bucket: !Ref ReferrerAppS3Bucket
  PipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "PipelineServiceRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codecommit:*
                  - codebuild:*
                  - cloudwatch:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "*"
      RoleName: "PipelineServiceRole"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Environment"
          Value: !Ref Environment
  CodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Name: "app-artifact"
        Type: "CODEPIPELINE"
      Name: !Ref CodeBuildName
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt PipelineServiceRole.Arn
      Source:
        Type: "CODEPIPELINE"
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Environment"
          Value: !Ref Environment
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref PipelineS3Bucket
        Type: S3
      Name: !Ref CodePipelineName
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt PipelineServiceRole.Arn
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              OutputArtifacts:
                - Name: APP_CODE
              ActionTypeId:
                Category: Source
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              Configuration:
                RepositoryName: !Ref RepositoryName
                BranchName: "master"
        - Name: "Build"
          Actions:
            - Name: "Build"
              InputArtifacts:
                - Name: APP_CODE
              OutputArtifacts:
                - Name: APP_BUILD
              ActionTypeId:
                Category: Build
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuild
        - Name: "Deploy"
          Actions:
            - Name: "Deploy"
              InputArtifacts:
                - Name: APP_BUILD
              ActionTypeId:
                Category: Deploy
                Owner: "AWS"
                Provider: "S3"
                Version: "1"
              Configuration:
                BucketName: !Ref ReferrerAppS3Bucket
                Extract: true
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Environment"
          Value: !Ref Environment
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Select [ 1, !Split [ "//", !GetAtt ReferrerAppS3Bucket.WebsiteURL ] ]
            Id: !GetAtt ReferrerAppS3Bucket.DomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.1
                - TLSv1.2
                - SSLv3
        Enabled: true
        HttpVersion: 'http2'
        DefaultCacheBehavior:
          ViewerProtocolPolicy: "redirect-to-https"
          TargetOriginId: !GetAtt ReferrerAppS3Bucket.DomainName
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: 'all'
          AllowedMethods:
            - GET
            - HEAD
            - DELETE
            - OPTIONS
            - PATCH
            - POST
            - PUT
        IPV6Enabled: true
      Tags:
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Environment"
          Value: !Ref Environment
Outputs:
  CloudFrontUrl:
    Value: !GetAtt CloudFront.DomainName
    Description: Cloudfront entpoint for website hosted on S3
